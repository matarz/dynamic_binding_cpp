{"name":"Dynamic Binding in C++","body":"![ScreenShot](http://img689.imageshack.us/img689/4967/20120423171542.jpg)\r\n\r\nThis project was a proof of concept for using dynamic binding in c++. The [assignment](http://web.cecs.pdx.edu/~karlaf/CS202_Fall09/Prog2.html) asked that we build a program that would manage at least three devices using one common interface. \r\n\r\n> Pick three high tech devices that you frequently use. Instead of re-implementing the functionality for common overlapping features, wouldnâ€™t a hierarchy be best to simulate their functionality? The best choices in technology would all have similar functionality, such as: turn on, turn off, run application, play/call,  go back, etc. Find the set of common functionality and pull it up to the common base class. Make the difference in the derived classes. <\r\n\r\nAnd\r\n\r\n> we will apply inheritance and pure polymorphism to the creation of our abstraction. In the main, use a pointer to a base class  which can point to objects of any type. Avoid using casting to solve this problem. Minimize your use of if/else (or switch) as well. Attempt to use pure polymorphism as much as possible. <\r\n\r\nFor similar devices, I picked three smartphones (droid, iphone, nokia-n73) due to their similar functionality. Classes that are specific for each device inherit the common class which is implemented in [device_ABC.h](https://github.com/matarz/dynamic_binding_cpp/blob/master/device_ABC.h) and [device_ABC.cpp](https://github.com/matarz/dynamic_binding_cpp/blob/master/device_ABC.cpp). Most of the dynamic binding \"magic\" can be found in main.cpp. Here is a snippet of it: \r\n![code0](http://img706.imageshack.us/img706/7205/20120423172159.jpg)\r\n\r\nThe variable _**i**_ in the above code is a pointer of type device_ABC (base class). It is then assigned one of the three derived classes (droid, iphpne, n73) based on user choice so we can use common function calls i.e **i->check_status()** or **i->take_pic()** for all three devices without having the need to use different pointers for each class.","tagline":"A proof of concept for using dynamic binding in c++","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}